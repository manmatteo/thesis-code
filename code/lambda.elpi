kind ty, tm type.
type i,o ty.
type of tm -> ty -> prop.
type (==>) ty -> ty -> ty.
type abs (tm -> tm) -> tm.
type app tm -> tm -> tm.

of (app T U) B :-
  of T (A ==> B),
  of U A.

of (abs T) (A ==> B) :-
  pi x\ of x A =>
  of (T x) B.

main :-
  of (abs x\ abs y\ app x y) X,
  print X.
