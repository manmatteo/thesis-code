kind ty, tm type.
type (-->) ty -> ty -> ty.
type abs (tm -> tm) -> tm.
type app tm -> tm -> tm.

type i,o ty.
type arr tm.
type all tm.

type of tm -> ty -> prop.
of arr (o --> o --> o).
of all ((i --> o) --> o).

of (app T U) B :-
  of T (A --> B),
  of U A.

of (abs T) (A --> B) :-
  pi x\ of x A =>
  of (T x) B.

main :-
  pi p\ of p (i --> o) =>
  pi q\ of q (i --> o) =>
    of (app all (abs x\ app (app arr (app p x)) (app q x))) o.
